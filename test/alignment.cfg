process Alignment = {
    
    # initialize  MessageLogger
    # include "FWCore/MessageLogger/data/MessageLogger.cfi"
    # This whole mess does not really work - I do not get rid of FwkReport and TrackProducer info...
    service = MessageLogger { 
	untracked vstring destinations = { "alignment" , "cout" }
	untracked vstring statistics = { "alignment" , "cout" }
	untracked vstring categories = { "Alignment", "LogicError", "FwkReport", "TrackProducer"}
	#untracked PSet FwkReport     = { untracked string threshold = "WARNING" }
	#untracked PSet TrackProducer = { untracked string threshold = "WARNING" }

	untracked PSet cout    = { 
	    untracked string threshold = "DEBUG" # "ERROR" 
	    untracked PSet FwkReport = {
		untracked string threshold = "ERROR" 
	    }
	    untracked PSet TrackProducer = {
		untracked string threshold = "ERROR" 
	    }
	    #      	untracked bool noLineBreaks = true 
	}
	untracked PSet alignment  = { 
	    untracked string threshold = "DEBUG" 
	    untracked PSet INFO = { untracked int32 limit = 10 }
	    untracked PSet WARNING = { untracked int32 limit = 10 }
	    untracked PSet ERROR = { untracked int32 limit = -1 }
	    untracked PSet DEBUG = { untracked int32 limit = -1 }
	    untracked PSet Alignment = { untracked int32 limit = -1}
	    untracked PSet LogicError = { untracked int32 limit = -1}
	    # untracked bool noLineBreaks = true 
	}
    }
    
    # initialize magnetic field
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
    
    # ideal geometry and interface
    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
    
    # track selection for alignment
    module AlignmentTracks = AlignmentTrackSelectorModule {
	InputTag src = AlCaRecoCSA06ZMuMu # AlCaReco
	bool filter = false
	
	bool applyBasicCuts = true
	double ptMin   = 10. #5. 
	double ptMax   = 999.
	double etaMin  = -2.4.
	double etaMax  =  2.4.
	double phiMin  = -3.1416
	double phiMax  =  3.1416
	double nHitMin = 10
	double nHitMax = 99
	double chi2nMax= 999999.
	
	bool applyNHighestPt = false
	int32 nHighestPt = 2
	
	bool applyMultiplicityFilter = true
	int32 minMultiplicity = 1
    }
    
    # Alignment producer (incl refitter)
    include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
    replace AlignmentProducer.randomShift    = 0.
    replace AlignmentProducer.randomRotation = 0.
    replace AlignmentProducer.ParameterBuilder.Selector.alignParams = {
	"PixelHalfBarrelLayers,fff000", # fix pixel
	"BarrelRodsDS,111001",          # 4 params for double sided barrel
	"TIBRodsSS,1f1001",             # fix global z/local y for single sided TIB...
	"TOBRodsSSLayers15,1f1001",     # ...and TOB
	"TOBRodsSSLayers66,fff00f"      # except of fixed last layer
    }

    replace AlignmentProducer.doMisalignmentScenario = true
    #replace AlignmentProducer.MisalignmentScenario.TECs.scale = 0. 
    #replace AlignmentProducer.MisalignmentScenario.TIBs.BarrelLayers.phiZ = 0.
    replace AlignmentProducer.MisalignmentScenario = {
        # FIXME using MisalignmentScenarioSettings # does not work in 1_0_6
	untracked bool dumpBefore  = false  // This is actually the default
	untracked bool dumpAfter   = false  // This is actually the default
	untracked bool saveToDbase = false  // This is actually the default
	
	string distribution = 'gaussian'
	int32 seed = 1234567
	bool  setError = true

        bool setRotations = true
        bool setTranslations = true
	#FIXME end

	PSet TIBs = { # no rotations, move rods in sensitive directions
	    string distribution = 'flat'
	    PSet BarrelLayers = {
		PSet Rods = { 
		    # double dXlocal = 0.02 double dYlocal = -0.05 double dZlocal = 0.01
		    # double localX = 0.002 double localY = 0.0006 double localZ = -0.02
		    double dXlocal = 0.03  double dZlocal = 0.035 
		    double localZ = 0.0002
		}
	    }
	    PSet BarrelLayer1 = {
		PSet Rods = { double dYlocal = 0.025 } # stereo layer...
	    }
	    PSet BarrelLayer2 = {
		PSet Rods = { double dYlocal = 0.025 } # dito
	    }
            #PSet BarrelLayers = {
            #    string distribution = 'gaussian'
            #    double dX = 0.0105 double dY = 0.0105 double dZ = 0.0500
            #    double phiZ = 0.000090
            #}
        }
	PSet TOBs = { # similar to TIB, but fix last layer
	    string distribution = 'flat'
	    PSet BarrelLayers = {
		PSet Rods = {
		    double dXlocal = 0.04  double dZlocal = 0.02
		    double localZ = 0.0004
		}
	    }
	    PSet BarrelLayer1 = {
		PSet Rods = { double dYlocal = 0.035 }
	    }
	    PSet BarrelLayer2 = {
		PSet Rods = { double dYlocal = 0.035 }
	    }
	    PSet BarrelLayer6 = { # fix it
		PSet Rods = { double dXlocal = 0. double dZlocal = 0. double localZ = 0.}
	    }
	}
    }


    replace AlignmentProducer.algoConfig = {
	# FIXME using DefaultRefitter # does not work in 1_0_6
	string Fitter = "KFFittingSmoother"   
	string Propagator = "PropagatorWithMaterial" 
	string TTRHBuilder = "WithoutRefit"
	string src = "AlignmentTracks"
        bool debug = false
	# FIXME end

	# using MillePedeAlignmentAlgorithm
	string algoName = "MillePedeAlignmentAlgorithm"
	untracked string mode = "full" # full, mille, pede, pedeSteer, pedeRun or pedeRead

	untracked string fileDir = "/scratch/flucke/millepede/simpleSel"

 	string binaryFile = "milleBinary.dat"
	untracked string monitorFile = "millePedeMonitor.root" # if empty: no monitoring...
	string treeFile = "treeFile.root"

	PSet pedeSteerer = {
	    string steerFile = "pedeSteer" # file without txt ending
	    untracked string pedeCommand = "~flucke/cms/pede/myWork_based_orig/pede -ilc"
	    untracked string pedeDump = "pede.dump"
	}
	int32 minNumHits = 5 # minimum number of hits (with alignable parameters)
    }
    
    # input file
    # source = EmptySource {untracked int32 maxEvents = 0}

    source = PoolSource { 
	untracked vstring fileNames = { 
# not readable with 1_2_0:
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_1.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_2.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_3.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_4.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_5.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_6.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_7.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_8.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_9.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_10.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_11.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_12.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_13.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_14.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_15.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_16.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_17.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_18.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_19.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_20.root",
"rfio:/castor/cern.ch/user/f/fpschill/crab/AlCaReco.103.CSA06ZMuMu.cern.500k.1910/alcareco.csa06zmumu_21.root"
	}
 	untracked int32 maxEvents   = -1 # 5000 #100
	untracked uint32 skipEvents = 0
    }	    
    
    path p = { AlignmentTracks }
	
    # REPLACEME (needed for inserting replace statements by perl script!)

}
