process Alignment = {
    
    # initialize  MessageLogger
    # include "FWCore/MessageLogger/data/MessageLogger.cfi"
    service = MessageLogger { 
	untracked vstring destinations = { "alignment" , "cout" }
	untracked vstring statistics = { "alignment" , "cout" }
	untracked vstring categories = { "Alignment", "LogicError"} #, "FwkReport", "TrackProducer"}
	#untracked PSet FwkReport     = { untracked string threshold = "WARNING" }
	#untracked PSet TrackProducer = { untracked string threshold = "WARNING" }

	untracked PSet cout    = { 
	    untracked string threshold = "ERROR" 
	    #      	untracked bool noLineBreaks = true 
	}
	untracked PSet alignment  = { 
	    untracked string threshold = "INFO" 
	          untracked PSet INFO = { untracked int32 limit = 10 }
	          untracked PSet WARNING = { untracked int32 limit = 10 }
	          untracked PSet ERROR = { untracked int32 limit = -1 }
	          untracked PSet DEBUG = { untracked int32 limit = 0 }
	          untracked PSet Alignment = { untracked int32 limit = -1}
	          untracked PSet LogicError = { untracked int32 limit = -1}
	    #      untracked bool noLineBreaks = true 
	}
    }
    
    # initialize magnetic field
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
    
    # ideal geometry and interface
    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
    
    # track selection for alignment
    module AlignmentTracks = AlignmentTrackSelectorModule {
	InputTag src = AlCaReco #TkAlDST
	bool filter = false
	
	bool applyBasicCuts = true
	double ptMin   = 10. #5. 
	double ptMax   = 999.
	double etaMin  = -2.4.
	double etaMax  =  2.4.
	double phiMin  = -3.1416
	double phiMax  =  3.1416
	double nHitMin = 10
	double nHitMax = 99
	double chi2nMax= 999999.
	
	bool applyNHighestPt = false
	int32 nHighestPt = 2
	
	bool applyMultiplicityFilter = true
	int32 minMultiplicity = 1
    }
    
    # Alignment producer (incl refitter)
    include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
    replace AlignmentProducer.randomShift    = 0.
    replace AlignmentProducer.randomRotation = 0.
    replace AlignmentProducer.ParameterBuilder.Selector.alignParams = {
	"PixelHalfBarrelLayers,111111", "BarrelRods,111111"
    }
    replace AlignmentProducer.algoConfig = {
	using DefaultRefitter
	# using MillePedeAlignmentAlgorithm
	string algoName = "MillePedeAlignmentAlgorithm"
	untracked string pedeOut = "pedeSteer.log" #pedeSteer.log" #empty: produce binary, else read in result

	string binaryFile = "milleBinary.dat"
	untracked string monitorFile = "millePedeMonitor.root" # if empty: no monitoring...
	string treeFile = "treeFile.root"

	PSet pedeSteerer = {
	    string steerFile = "pedeSteer.txt"

	    PSet fixedParameterSelection = {
		# selection of alignables and their parameters:
		# comma separated pairs of detector parts/levels as defined in AlignableSelector
		# and of d.o.f. to be aligned (x,y,z,alpha,beta,gamma) in local frame
		vstring alignParams = {
		    "PixelHalfBarrelLayers,111111", # fix pixel
		    "BarrelSSRodsLayers15,010110",   # align x,z,gamma (rphi,r,around r?), but...
		    "BarrelSSRodsLayers66,111111",   # ...fix last barrel layer
		    "BarrelDSRods,000110"            # align x,y,z,gamma (rphi,z,r,around r?)
		}
	    }
	}
	int32 minNumHits = 5 # minimum number of hits (with alignable parameters)
    }
    
    # input file
    #source = EmptySource {untracked int32 maxEvents = 5}
    source = PoolSource { 
	
	untracked vstring fileNames = { 
	    "rfio:///?path=/shift/lxfsrk4102/data01/zh/fpschill/AlCaRecoRelVal111_CMSSW_1_2_0_pre3/SingleMuMinusPt100.root",
	    "rfio:///?path=/shift/lxfsrk4102/data01/zh/fpschill/AlCaRecoRelVal111_CMSSW_1_2_0_pre3/SingleMuPlusPt100.root"
#			"file:/afs/cern.ch/user/f/fpschill/w1/cmssw/data/singlemu-.pt100.tkaldst.090.root",
#			"file:/afs/cern.ch/user/f/fpschill/w1/cmssw/data/singlemu+.pt100.tkaldst.090.root"
#			"rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part1.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part2.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part3.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part4.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part5.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part6.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part7.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part8.092.root",
#                        "rfio:/shift/lxfsrk4102/data01/zh/fpschill/alcareco.tier0tests.zmumu.092.190906/alcareco.tier0tests.zmumu.part9.092.root"
	}
	untracked int32 maxEvents   = 0 #-1 #100
	untracked uint32 skipEvents = 0
	
    }	    
    
    path p = { AlignmentTracks }
	
    # REPLACEME (needed for inserting replace statements by perl script!)

}
